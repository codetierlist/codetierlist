generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Assignment {
  hidden          Boolean    @default(false)
  title           String
  due_date        DateTime?
  description     String
  course_id       String
  course          Course     @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  test_cases      TestCase[]
  submissions     Solution[]
  runner_image    String
  image_version   String
  group_size      Int        @default(0)
  groups          Group[]
  strict_deadline Boolean    @default(false)

  @@id(fields: [course_id, title])
  @@unique([course_id, title], name: "id")
  @@map("Assignments")
}

model Group {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @map("_id")
  number           Int
  assignment       Assignment @relation(fields: [course_id, assignment_title], references: [course_id, title])
  course_id        String
  assignment_title String
  solutions        Solution[]
  testCases        TestCase[]
  members          User[]

  @@unique([course_id, assignment_title, number], name: "_id")
  @@map("Groups")
}

model Course {
  hidden      Boolean      @default(false)
  id          String       @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  code        String
  assignments Assignment[]
  roles       Role[]
  solutions   Solution[]
  testcases   TestCase[]
  cover       String?

  createdAt DateTime @default(now())

  @@map("Courses")
}

model Solution {
  id               String     @unique @default(dbgenerated("gen_random_uuid()")) @map("_id")
  git_url          String
  git_id           String
  datetime         DateTime   @default(now())
  author_id        String
  author           User       @relation(fields: [author_id], references: [utorid], onDelete: Cascade, onUpdate: Cascade)
  course           Course     @relation(fields: [course_id], references: [id])
  assignment       Assignment @relation(onDelete: Cascade, onUpdate: Cascade, fields: [course_id, assignment_title], references: [course_id, title])
  scores           Score[]
  course_id        String
  assignment_title String
  group_number     Int?
  group            Group?     @relation(fields: [group_number, assignment_title, course_id], references: [number, assignment_title, course_id])

  @@id(fields: [course_id, assignment_title, author_id, git_id])
  @@unique([course_id, assignment_title, author_id, git_id], name: "_id")
  @@map("Solutions")
}

enum TestCaseStatus {
  INVALID
  VALID
  PENDING
  EMPTY
}

model TestCase {
  id               String         @unique @default(dbgenerated("gen_random_uuid()")) @map("_id")
  git_url          String
  git_id           String
  datetime         DateTime       @default(now())
  author_id        String
  author           User           @relation(fields: [author_id], references: [utorid], onDelete: Cascade, onUpdate: Cascade)
  assignment       Assignment     @relation(onDelete: Cascade, onUpdate: Cascade, fields: [course_id, assignment_title], references: [course_id, title])
  course           Course         @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scores           Score[]
  course_id        String
  assignment_title String
  valid            TestCaseStatus @default(PENDING)
  group_number     Int?
  group            Group?         @relation(fields: [group_number, assignment_title, course_id], references: [number, assignment_title, course_id])

  @@unique([course_id, assignment_title, author_id, git_id], name: "_id")
  @@map("Testcases")
}

model User {
  utorid           String        @id
  email            String
  solutions        Solution[]
  roles            Role[]
  admin            Boolean       @default(false)
  TestCase         TestCase[]
  surname          String
  givenName        String
  theme            Theme         @default(LIGHT)
  groups           Group[]
  achievements     Achievement[]
  new_achievements Boolean       @default(false)

  @@map("Users")
}

model Achievement {
  id           Int
  completed_at DateTime @default(now())
  user         User     @relation(fields: [utorid], references: [utorid], onDelete: Cascade, onUpdate: Cascade)
  utorid       String

  @@id([id, utorid])
  @@unique([id, utorid], name: "_id")
  @@map("Achievements")
}

enum RoleType {
  INSTRUCTOR
  TA
  STUDENT
}

enum Theme {
  LIGHT
  DARK
}

model Role {
  type      RoleType @default(STUDENT)
  user_id   String
  course_id String
  course    Course   @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation(fields: [user_id], references: [utorid], onDelete: Cascade, onUpdate: Cascade)

  @@id(fields: [user_id, course_id])
  @@unique([user_id, course_id], name: "id")
  @@map("_Roles")
}

model Score {
  datetime           DateTime @default(now())
  id                 String   @id @default(dbgenerated("gen_random_uuid()"))
  pass               Boolean
  solution           Solution @relation(references: [course_id, assignment_title, author_id, git_id], onDelete: Cascade, onUpdate: Cascade, fields: [course_id, assignment_title, solution_author_id, solution_commit_id])
  test_case          TestCase @relation(references: [course_id, assignment_title, author_id, git_id], onDelete: Cascade, onUpdate: Cascade, fields: [course_id, assignment_title, testcase_author_id, testcase_commit_id])
  course_id          String
  assignment_title   String
  solution_author_id String
  solution_commit_id String
  testcase_author_id String
  testcase_commit_id String

  @@map("_Scores")
}
